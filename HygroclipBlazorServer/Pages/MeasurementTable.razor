@page "/measurement_table"

<PageTitle>Measurement Table</PageTitle>

@using HygroclipBlazorServer.Data
@inject EnvironmentalMeasurementService MeasurementService

<h1>Environmental Measurments</h1>

@*<button class="btn btn-primary" @onclick="UpdateTableAsync">Update</button>*@

@if (environmentalMeasurements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Humidity. (F)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var measurement in environmentalMeasurements)
            {
                <tr>
                    <td>@measurement.DateTime</td>
                    <td>@measurement.Temperature.ToString("N2")</td>
                    <td>@measurement.Humidity.ToString("N2")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private EnvironmentalMeasurement[]? environmentalMeasurements;
    private TimeSpan maximumMeasurmentAge = TimeSpan.FromMinutes(5);
    private DateTime minimumMeasurmentTime => DateTime.Now - maximumMeasurmentAge;

    protected override async Task OnInitializedAsync()
    {
        MeasurementService.DatabaseUpdated += async (s, e) =>
        {
            await UpdateTableAsync();
            _ = InvokeAsync(StateHasChanged);
        };

        await UpdateTableAsync();
    }

    private async Task UpdateTableAsync()
    {
        var measurments = await MeasurementService.GetMeasurementsAsync(DateTime.Now - TimeSpan.FromMinutes(30), count: 10);

        environmentalMeasurements = measurments?.OrderByDescending(meas => meas.DateTime).ToArray();
    }
}
